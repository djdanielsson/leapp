---
- name: Capture previous_distribution_major_version
  ansible.builtin.set_fact:
    previous_distribution_major_version: "{{ ansible_distribution_major_version }}"

- name: Collect updated facts
  ansible.builtin.setup:

- name: Validate current OS version from rhel 7
  ansible.builtin.assert:
    that: ansible_distribution_version == rhel_7_upgrade_dest_version
    fail_msg: Expected leapp destination OS version {{ rhel_7_upgrade_dest_version }} but OS version is {{ ansible_distribution_version }}
    success_msg: Current OS version is {{ ansible_distribution_version }}.
  when: previous_distribution_major_version == '7'

- name: Validate current OS version from rhel 8
  ansible.builtin.assert:
    that: ansible_distribution_version == rhel_8_upgrade_dest_version
    fail_msg: Expected leapp destination OS version {{ rhel_8_upgrade_dest_version }} but OS version is {{ ansible_distribution_version }}
    success_msg: Current OS version is {{ ansible_distribution_version }}.
  when: previous_distribution_major_version == '8'

- name: Validate running kernel matches OS version
  ansible.builtin.assert:
    that: "'el{{ ansible_distribution_major_version }}' in ansible_kernel"
    fail_msg: Kernel version {{ ansible_kernel }} does not match OS version el{{ ansible_distribution_major_version }}.
    success_msg: Current kernel version is {{ ansible_kernel }}.
...
